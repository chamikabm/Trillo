//////////////////////////////////
// LOGO
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

//////////////////////////////////
// SEARCH
.search {
  flex: 0 0 40%;

  display: flex;
  justify-content: center;
  align-items: center;

  &__input {
    // In input elements font related properties (i.e: color, size, family) does not inherit automatically,
    // we need to specify them explicitly.
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    background-color: var(--color-grey-light-2);
    border: none;
    padding: .7rem 2rem;
    border-radius: 100px;
    width: 90%;
    transition: all .2s;
    margin-right: -2.25rem; // This allows search__button to come top of the search__input

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    &::-webkit-input-placeholder { // Chrome, Safari.
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  // When the input get focus, select the button.
  &__input:focus + &__button {
    background-color: var(--color-grey-light-3);
  }

  &__button {
    border: none;
    background-color: var(--color-grey-light-2);

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px);
    }
  }

  &__icon {
    // To format the SVG icons, You just simply give the Width and Height for the SVG element.
    // Unlike, font icons you can customize SVG icons, that's very handy.
    height: 2rem;
    width:2rem;

    // You can use the fill property to change the color of the SVG images.
    fill: var(--color-grey-dark-3);
  }
}


//////////////////////////////////
// USER NAVIGATION
.user-nav {
  // Stretches this to fill the "header", as it is set to "align-items: center" on it's
  // flex property. Here we are override that one.
  align-self: stretch;

  display: flex;
  align-items: center;

  // This ">" CSS selector used to Select all(*) direct children of "user-nav"
  // (i.e : "user-nav__icon-box" and "user-nav__user")
  & > * {
    padding: 0 2rem;
    cursor: pointer;
    height: 100%;

    display: flex;
    align-items: center;
  }

  & > *:hover {
    background-color: var(--color-grey-light-2);
  }

  &__icon-box {
    position: relative;
  }

  &__icon {
    height: 2.25rem;
    width:2.25rem;
    // You can use the fill property to change the color of the SVG images.
    fill: var(--color-grey-dark-2);
  }

  &__notification {
    font-size: .8rem;
    color: white;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%;
    background-color: var(--color-primary);
    position: absolute;
    top: 1.5rem;
    right: 1.1rem;

    //  Flex box not only works for the elements, we can use it for the
    //  aligning text also.
    //  Here we are using flex box to center notification value inside it's container.
    display: flex;
    justify-content: center;
    align-items: center;
  }

  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }
}


//////////////////////////////////
// SIDE NAVIGATION
.side-nav {
  font-size: 1.4rem;
  list-style: none;
  margin-top: 3.5rem;

  &__item {
    position: relative;

    &:not(:last-child) {
      margin-bottom: .5rem;
    }
  }

  &__item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 3px;
    background-color: var(--color-primary);
    transform: scaleY(0);
    // This property defines where transform should, start.
    // By default it is set to center. That's what we need.
    // Following is set to bottom for testing to understand the behaviour of
    // "transform-origin" property.
    //transform-origin: bottom;

    // We can use "transition" property to animate multiple properties like below.
    // Each property can have syntax like this:
    // <property>: <animation_duration> <animation> <delay: optional>
    transition: transform .2s, // animation_duration = .2s

                // animation_duration = .4s, delay .2s, having delay .2s means start after .2 seconds.
                //  Since the first property has .2s animation duration and second property has .2s
                //  delay, second property animation starts after the first property animation.
                width .4s cubic-bezier(1, 0, 0, 1) .2s,
                background-color .1s;

  }


  &__item:hover::before, // When hover item, select before element
  &__item--active::before {
    transform: scaleY(1);
    width: 100%;
  }

  // When click on(active) item, select before element
  &__item:active::before {
    background-color: var(--color-primary-light);
  }

  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none;
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;

    display: flex;
    align-items: center;

    // We need to specify the position in order to work the z-index here.
    position: relative;
    z-index: 10;
  }

  &__icon {
    // For the SVG icons, usually keep width and height as same.
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;

    // currentColor take the color of the parent element.
    // Which is "color: var(--color-grey-light-1);" of "&__link"
    fill: currentColor;
  }
}


//////////////////////////////////
// LEGAL TEXT
.legal {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;
}


//////////////////////////////////
// GALLERY
.gallery {
  display: flex;

  &__photo {
    width: 100%;
    // Sometimes when we add images, It give empty spaces underneath the images.
    // Having "display: block;" or "display: inline-block;" will fix that issue.
    display: block;
  }
}


//////////////////////////////////
// HOTEL OVERVIEW
.overview {
  display: flex;
  //justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid var(--color-grey-light-2);

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;
  }

  &__stars {
    /*
      flex: <flex-grow>
      Take the full available space.
      flex: 1;

      But, if we have above settings, the element will fully stretch to its width.
      In that case, if we add a hover effect or something over that element. it will
      take effect to whole element. In such cases we use  "margin-right:auto" or
      "any margin setting based on the case:auto", in order to occupy the available space,
      without stretching the element and only keeping the element size or the width
      up to it's content width.



      Hence here we use "margin-right: auto;" without "flex: 1;"
      Use "background-color: orangered;" to see, what's happening when you change above settings.
    */
    margin-right: auto;
    //background-color: orangered;

    display: flex; // Used to center all the SVG stars inside the container.
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
  }

  &__icon-location {
    margin-right: .5rem;
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__rating {
    background-color: var(--color-primary);
    color: white;
    margin-left: 3rem;

    // Because the parent .overview element's has set the "align-items" to "center"
    // Hence, in order to take this element to take full available height,
    // We self align it to "stretch" using "align-self" property.
    align-self: stretch;
    padding: 0 2.25rem;

    // Center the elements inside.
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    &-average {
      font-size: 2.25rem;
      font-weight: 300;
    }

    &-count {
      font-size: .8rem;
      text-transform: uppercase;
    }
  }
}

//////////////////////////////////
// BUTTON INLINE

.btn-inline {
  border: none;
  color: var(--color-primary);

  // Using this trick we can have different font-sizses for the button based on the
  // place it put, by setting it's parent font size and letting it inherited to the btn.
  font-size: inherit;

  // This "currentColor" will take the "color: var(--color-primary);" color.
  // Having this, when we change the color of the element it will reflect in the
  // border as well. Example use case would be changing the hover font color will,
  // lead to have the same border color. See the below hover example.
  // Otherwise in the "&:hover" you need to update the border color separately.
  border-bottom: 1px solid currentColor;

  padding-bottom: 2px;
  display: inline-block;
  background-color: transparent; // Remove default grey background.
  cursor: pointer;
  transition: all .2s;

  &:hover {
    color: var(--color-grey-dark-1);
  }

  &:focus {
    outline: none;
    animation: pulsate 1s infinite;
  }
}

@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, .25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}