.container {
  max-width: 120rem;
  margin: 8rem auto;
  background-color: var(--color-grey-light-2);
  box-shadow: var(--color-shadow-dark);

  // With media queries we can't use the CSS variables, thus we have to use the
  // SASS custom variables.


}

.header {
  font-size: 1.4rem;
  height: 7rem;
  background-color: white;
  border-bottom: var(--line);
  display: flex;
  justify-content: space-between;
  align-items: center;

  @media only screen and (max-width: $bp-smallest) {
    // Used to move the search bar to the next row if the flex container (i.e: "header" element)
    // does not have enough space to hold the search bar.
    flex-wrap: wrap;
    align-content: space-around; // User to align flex items when they wrap into two or more rows.
    height: 11rem;
  }
}

.content {
  display: flex;
  // flex: <flex-grow> <flex-shrink> <flex-basis>
  // We don't want to grow the element, hence flex-grow = 0
  // We don't want to shrink the element, hence flex-shrink = 0
  //flex: 0 0 10%;

  @media only screen and (max-width: $bp-medium) {
    flex-direction: column;
  }
}

.sidebar {
  background-color: var(--color-grey-dark-1);
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.hotel-view {
  background-color: white;
  // flex: <flex-grow>
  // Take the full available space.
  flex: 1;
}

.detail {
  font-size: 1.4rem;
  display: flex;
  padding: 4.5rem;
  background-color: var(--color-grey-light-1);
  border-bottom: var(--line);

  /*
   When are doing desktop first development (i.e media queries with "max-width")
   with CSS media queries, we should put the largest screen size top
   and the smallest one at the bottom, as all the media queries get applied
   when we have smaller screens. For the mobile first development
   (i.e media queries with "min-width") we should do it other way around.

   See the example below for desktop first development.
   */
  @media only screen and (max-width: $bp-medium) {
    padding: 3rem;
  }

  @media only screen and (max-width: $bp-small) {
    flex-direction: column;
  }
}

.description {
  background-color: white;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  // We don't need to scale up or down the element, But we need this element to take.
  // 60% of the available width from ".detail" element.
  flex: 0 0 60%;
  margin-right: 4.5rem; // same as .detail padding

  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-right: 3rem; // same as .detail padding
  }

  @media only screen and (max-width: $bp-small) {
    margin-right: 0;
    margin-bottom: 3rem;
  }
}

.user-reviews {
  // Since ".description" takes 60% available width from ".detail" element, we want
  // this element to takes the remaining full width of the ".detail" element. So we set
  // flex: <flex-grow>
  // flex: 1 - Take the full available space.
  flex: 1;

  display: flex;
  flex-direction: column;

  // If don't set the "align-items: center" property, the button at the bottom will
  // stretch out it's full width horizontally, because "align-items" default value is;
  // "stretch", since we only want to take the button to take it's content width, we then
  // need to set the "align-items: center", which will only takes the button content width.
  align-items: center;
}